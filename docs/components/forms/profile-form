# ProfileForm Component

## Overview
The `ProfileForm` component allows users to create or update their profiles in Mosaic. It captures key information such as the userâ€™s name, handle, email, password, studio, and profile picture. Users can also manage their subscriptions from this form.

---

## Form Structure
1. **Fields:**
   - **Full Name (required):**
     - A single-line text input.
     - Validates that the name is not empty.
   - **Handle (required):**
     - A unique identifier (e.g., @username).
     - Validates that the handle meets character requirements and is unique.
   - **Email (required):**
     - Validates proper email format.
   - **Password (required):**
     - Password input field with a "Show/Hide" toggle for visibility.
     - Validates minimum length (e.g., 8 characters) and complexity (e.g., includes numbers or symbols).
   - **Studio (optional):**
     - A text input for users to specify their studio affiliation.
   - **Upload Profile Picture (optional):**
     - A file input for uploading an image.
     - Validates file type (e.g., JPEG, PNG) and size limit (e.g., 2MB).
   - **Manage Subscription (optional):**
     - A link or button to navigate users to the subscription management page.

2. **Submit Button:**
   - Submits the profile data.
   - Includes a loading state during submission.

---

## Key Features
1. **Validation:**
   - Ensures all required fields are completed.
   - Validates email format and password complexity.
2. **Dynamic Error Messaging:**
   - Displays errors inline for invalid or missing fields.
3. **Loading State:**
   - Disables the form and shows a spinner on the button during submission.
4. **File Upload Handling:**
   - Ensures the profile picture meets file type and size requirements.
5. **Subscription Management Integration:**
   - Provides a seamless redirect to manage subscription plans.

---

## Props

| **Prop**          | **Type**   | **Default** | **Description**                            |
|-------------------|------------|-------------|--------------------------------------------|
| `initialValues`   | `object`   | `{}`        | Prefills the form for editing a profile.   |
| `onSubmit`        | `function` | `null`      | Callback triggered on form submission.     |
| `isLoading`       | `boolean`  | `false`     | Indicates if the form is submitting.       |

---

## Example Implementation
```javascript
<ProfileForm
  initialValues={{
    name: "Jane Doe",
    handle: "@jane",
    email: "jane@example.com",
    studio: "Pilates Studio XYZ",
  }}
  onSubmit={(profile) => console.log("Profile submitted:", profile)}
  isLoading={false}
/>
```

---

## CSS Requirements
- **Wrapper**: Centered form with a max width of `500px`.
- **Input Fields**:
  - Border radius: `8px`.
  - Padding: `10px`.
  - Validation: Red border and error message for invalid fields.
- **Submit Button**:
  - Background: Turquoise (#40E0D0).
  - Hover: Slightly darker turquoise.
  - Loading spinner when `isLoading` is `true`.

```css
.profile-form {
  background-color: #1e1e1e;
  padding: 20px;
  border-radius: 12px;
  width: 100%;
  max-width: 500px;
  color: white;
  font-family: "Julius Sans One", sans-serif;
}

.profile-form .input-field {
  width: 100%;
  padding: 10px;
  margin-bottom: 16px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.profile-form .error {
  color: red;
  font-size: 12px;
}

.profile-form .submit-button {
  width: 100%;
  padding: 10px;
  background-color: #40E0D0;
  border: none;
  border-radius: 8px;
  color: white;
  cursor: pointer;
}

.profile-form .submit-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.profile-form .file-upload {
  margin-top: 10px;
}

.profile-form .subscription-link {
  color: #40E0D0;
  text-decoration: underline;
  cursor: pointer;
  margin-top: 15px;
}
```

---

## Backend Integration Requirements
- The `onSubmit` callback should send the form data to the backend with this payload structure:
  ```json
  {
    "name": "Jane Doe",
    "handle": "@jane",
    "email": "jane@example.com",
    "password": "password123",
    "studio": "Pilates Studio XYZ",
    "profilePicture": "base64EncodedImageData"
  }
  ```
- API should handle:
  - Validation errors (e.g., duplicate handles or invalid email).
  - File upload for profile pictures (store securely and return a URL).
  - Linking the user profile to their subscription details.

---

## Use Cases
1. **Profile Creation:**
   - Allows new users to create an account with required details.
2. **Profile Editing:**
   - Enables existing users to update their profile information.
3. **Studio Details:**
   - Users can add their studio affiliation to personalize their profiles.
4. **Manage Subscription:**
   - Redirect users to a page to change or cancel their subscription.

---

### Notes for Developers
- Ensure password input has proper encryption before being sent to the backend.
- Add inline error messaging for invalid handles or emails (e.g., "This handle is already taken").
- Provide image optimization for uploaded profile pictures to reduce file size.
- Ensure subscription management integrates seamlessly with the user profile page.

