# Password Reset Form

## Overview
The `PasswordResetForm` allows users to reset their password securely. It includes a two-step process where users first provide their email to receive a reset link and then set a new password using the link.

---

## Form Structure
### Step 1: Request Reset Link
1. **Fields:**
   - **Email Address (required):**
     - Text input field for the userâ€™s registered email.
     - Validates for proper email format.

2. **Submit Button:**
   - Triggers the backend to send a password reset link.
   - Disabled until the email field is valid.

3. **Feedback Messaging:**
   - Displays confirmation once the reset link is sent.
   - Error messages for invalid or unregistered email addresses.
   - A confirmation modal appears with a message like "A reset link has been sent to your email. Please check your inbox." and an OK button to close it.

---

### Step 2: Reset Password
1. **Fields:**
   - **New Password (required):**
     - Password input with a "Show/Hide" toggle.
     - Validates for minimum length (e.g., 8 characters) and complexity (e.g., includes numbers or symbols).
   - **Confirm Password (required):**
     - Password input to confirm the new password.
     - Validates that it matches the New Password field.

2. **Submit Button:**
   - Submits the new password to the backend for processing.
   - Disabled until all required fields are valid.

3. **Feedback Messaging:**
   - Displays confirmation once the password has been successfully reset.
   - A confirmation modal appears with a message like "Your password has been reset successfully! You can now log in." and a button to redirect to the login page.
   - Error messages for invalid or expired reset tokens.

---

## Key Features
1. **Validation:**
   - Ensures the email field is properly formatted.
   - Validates password strength and matching fields.
2. **Security:**
   - Utilizes secure token-based links for password resets.
   - Prevents brute force attacks with rate-limiting.
3. **User Feedback:**
   - Real-time inline error messages.
   - Confirmation modals for successful actions.

---

## Props

| **Prop**          | **Type**   | **Default** | **Description**                            |
|-------------------|------------|-------------|--------------------------------------------|
| `onRequestReset`  | `function` | `null`      | Callback triggered when the reset link is requested. |
| `onResetPassword` | `function` | `null`      | Callback triggered when the new password is submitted. |
| `isLoading`       | `boolean`  | `false`     | Indicates if the form is submitting.       |
| `showModal`       | `boolean`  | `false`     | Controls the display of confirmation modals. |
| `modalMessage`    | `string`   | `""`       | Message to display in the modal.           |

---

## Example Implementation
```javascript
<PasswordResetForm
  onRequestReset={(email) => handleRequestReset(email)}
  onResetPassword={(newPassword) => handlePasswordReset(newPassword)}
  isLoading={false}
  showModal={true}
  modalMessage={"Your password has been reset successfully!"}
/>
```

---

## CSS Requirements
- **Wrapper**: Centered form with a max width of `400px`.
- **Input Fields**:
  - Border radius: `8px`.
  - Padding: `10px`.
  - Validation: Red border and error message for invalid fields.
- **Submit Button:**
  - Style similar to the login form for consistency.
- **Modal:**
  - Centered on the page with a semi-transparent background overlay.

```css
.password-reset-form {
  background-color: #1e1e1e;
  padding: 20px;
  border-radius: 12px;
  width: 100%;
  max-width: 400px;
  color: white;
  font-family: "Julius Sans One", sans-serif;
}

.password-reset-form .input-field {
  width: 100%;
  padding: 10px;
  margin-bottom: 16px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

.password-reset-form .error {
  color: red;
  font-size: 12px;
}

.password-reset-form .submit-button {
  width: 100%;
  padding: 10px;
  background-color: #40E0D0;
  border: none;
  border-radius: 8px;
  color: white;
  cursor: pointer;
}

.password-reset-form .submit-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.password-reset-form .modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

.password-reset-form .modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}
```

---

## Backend Integration Requirements
- **Request Reset Link:**
  - API should accept the email address and send a reset link if the user exists.
  ```json
  {
    "email": "jane@example.com"
  }
  ```
- **Reset Password:**
  - API should accept the reset token and new password.
  ```json
  {
    "token": "secure-reset-token",
    "newPassword": "NewPassword123"
  }
  ```

---

## Use Cases
1. **Forgot Password:**
   - Users request a reset link if they forget their password.
2. **Reset Password:**
   - Users set a new password using the secure link provided.
3. **Confirmation Modal:**
   - Ensures users receive clear feedback after requesting a reset link or resetting their password.

---

### Notes for Developers
- Ensure reset tokens are securely generated and have a short expiration time.
- Implement rate-limiting to prevent abuse of the reset link request endpoint.
- Provide localized error messages for invalid or expired tokens.
- Modals should be reusable and styled consistently with the rest of the app.

