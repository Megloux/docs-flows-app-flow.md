/**
 * Exercise Modal Component
 * 
 * This component demonstrates Lovable's approach to modals and video content:
 * - Uses shadcn/ui Dialog for accessibility and keyboard interactions
 * - Implements responsive video embedding
 * - Handles loading and error states gracefully
 * - Manages transitions smoothly
 */
interface ExerciseModalProps {
  exercise: Exercise;
  onClose: () => void;
}

export function ExerciseModal({ exercise, onClose }: ExerciseModalProps) {
  // Track video loading state
  const [isVideoLoading, setIsVideoLoading] = useState(true);
  
  // Handle Vimeo player events
  const handlePlayerReady = useCallback(() => {
    setIsVideoLoading(false);
  }, []);

  return (
    <Dialog open onOpenChange={() => onClose()}>
      <DialogContent className="max-w-4xl w-full">
        {/* Header Section */}
        <DialogHeader>
          <DialogTitle className="font-modern tracking-wider text-2xl">
            {exercise.name}
          </DialogTitle>
          <DialogDescription className="text-muted-foreground">
            {exercise.category}
          </DialogDescription>
        </DialogHeader>

        {/* Video Section */}
        <div className="relative aspect-video w-full bg-muted rounded-lg overflow-hidden">
          {/* Loading State */}
          {isVideoLoading && (
            <div className="absolute inset-0 flex items-center justify-center">
              <Spinner className="w-8 h-8 text-primary" />
            </div>
          )}

          {/* Vimeo Player Integration */}
          <iframe
            src={`https://player.vimeo.com/video/${exercise.videoId}?autoplay=0&title=0&byline=0&portrait=0`}
            className={cn(
              "absolute inset-0 w-full h-full",
              "transition-opacity duration-300",
              isVideoLoading ? "opacity-0" : "opacity-100"
            )}
            allow="autoplay; fullscreen; picture-in-picture"
            onLoad={handlePlayerReady}
          />
        </div>

        {/* Exercise Details */}
        <div className="space-y-6">
          {/* Setup Instructions */}
          <section className="space-y-2">
            <h3 className="font-modern tracking-wider text-lg font-medium">
              Setup
            </h3>
            <p className="text-muted-foreground leading-relaxed">
              {exercise.setup}
            </p>
          </section>

          {/* Exercise Cues */}
          <section className="space-y-2">
            <h3 className="font-modern tracking-wider text-lg font-medium">
              Cues
            </h3>
            <ul className="space-y-2">
              {exercise.cues.map((cue, index) => (
                <li 
                  key={index}
                  className="flex gap-2 text-muted-foreground"
                >
                  <span className="text-primary">â€¢</span>
                  {cue}
                </li>
              ))}
            </ul>
          </section>

          {/* Modifications */}
          {exercise.modifications && (
            <section className="space-y-2">
              <h3 className="font-modern tracking-wider text-lg font-medium">
                Modifications
              </h3>
              <div className="text-muted-foreground leading-relaxed">
                {exercise.modifications}
              </div>
            </section>
          )}
        </div>

        {/* Footer Actions */}
        <DialogFooter>
          <Button onClick={onClose}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
